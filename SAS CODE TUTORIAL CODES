/* Section 1 - Access and Create Data Structures */

/* 1. Create temporary and permanent SAS data sets. */
/* • Use a DATA step to create a SAS data set from an existing SAS data set. */

/*temporary dataset in my work library*/
 
data bpressure;
	input sbp dbp hrate time date;
	datalines;

180 89 76 8:00 6/1/2022
175 67 89 11:00 6/1/2022
167 78 87 8:00 6/2/2022
140 86 75 11:00 6/2/2022
156 87 78 8:00 6/3/2022
135 56 86 11:00 6/3/2022
145 78 96 8:00 6/4/2022
165 89 106 11:00 6/4/2022
;
run;

data heart;
set sashelp.heart;
run;

/*permanent sas lib*/

libname heartp '/home/ejanettygallarde0/SAS Folder';
data heart;
set sashelp.heart;
run;


/* 2. Investigate SAS data libraries using base SAS utility procedures. */
/* • Use a LIBNAME statement to assign a library reference name to a SAS library. */
/* • Investigate a library programmatically using the CONTENTS procedure. */

proc contents data=sashelp.heart directory;
run;

/* Access data */
/* • Access SAS data sets with the SET statement. */

data heart;
  set sashelp.heart;
  if Status = 'Dead';
run;


/* • Use PROC IMPORT to access non-SAS data sources. */

proc export data=heart
			outfile="/home/ejanettygallarde0/heartxl.xlsx"
			dbms= xlsx replace;
			sheet= "heart";
run;
proc export data=heart
			outfile="/home/ejanettygallarde0/heartxl.csv"
			dbms= csv replace;
run;

  
/* o Read delimited and Microsoft Excel (.xlsx) files with PROC IMPORT. */

proc import out=heart_import
datafile="/home/ejanettygallarde0/heartxl.xlsx"
dbms=xlsx replace;
sheet= 'heart';
getnames=yes;
run;

proc import out=heart_csvimport
datafile="/home/ejanettygallarde0/heartxl.csv"
dbms=csv replace;
getnames=yes;
guessingrows=2;
run;

/* o Use PROC IMPORT statement options (OUT=, DBMS=, REPLACE) */
/* o Use the GUESSINGROWS statement */
proc import out=heart_csvimport
datafile="/home/ejanettygallarde0/heartxl.csv"
dbms=csv replace;
getnames=yes;
guessingrows=2;
run;

proc contents data=heart_csvimport;
run;

/* • Use the SAS/ACCESS XLSX engine to read a Microsoft Excel workbook.xlsx file. */

libname myxlsx xlsx "/folders/myfolders/baseball.xlsx";


/* 3. Combine SAS data sets. */

/* • Concatenate data sets. */
data concat;
   set sashelp.iris(where=(species='Setosa')) sashelp.iris(where=(species='Versicolor'));
run;

/* • Merge data sets one-to-one. */
data one_to_one;
   merge sashelp.buy(in=a) sashelp.countseries (in=b);
   by date;
   if a and b;
run;

/* • Merge data sets one-to-many. */
data one_to_many;
   merge sashelp.buy(in=a) sashelp.countseries (in=b);
   by date;
   if a and b;
run;

/* 4. Create and manipulate SAS date values. */
/* • Explain how SAS stores date and time values. */
/* • Use SAS informats to read common date and time expressions. */
/* • Use SAS date and time formats to specify how the values are displayed. */

data air;
   set sashelp.air;
   
   date0=date*1; 
   day = day(date);
   month = month(date);
   year = year(date);
   time = time();
   date_time = dhms(date, 0, 0, 0);
   
   format date_time datetime20.;

run;

/* 5.Control which observations and variables in a SAS data set are processed and */
/* output. */
/* • Use the WHERE statement in the DATA step to select observations to be processed. */
data iris;
   set sashelp.iris;
   
   where species = 'Setosa';
   
run;

/* • Subset variables to be output by using the DROP and KEEP statements. */

data baseball;
   set sashelp.baseball;
   
/*    keep name logsalary; */
   drop name logsalary;
   
run;
/* • Use the DROP= and KEEP= data set options to specify columns to be processed and/or */
/* output. */
data baseball;
   set sashelp.baseball (keep = name logsalary nhits natbat drop=logsalary);
run;   





/*Section 2 - Manage Data */

/*1.Sort observations in a SAS data set.*/
/*- Use the SORT Procedure to re-order observations in place or output to a new dataset with the OUT= option.*/
proc sort data=sashelp.cars
          out=cars_by_price;
   by msrp;
run;

proc sort data=sashelp.cars
          out=cars_by_price_high;
   by descending msrp;
run;

/*- Remove duplicate observations with the SORT Procedure.*/
data duplicate;
   set cars_by_price cars_by_price;
run;    

proc sort data=duplicate nodup
          out=deduped;
   by make model msrp;
run; 


/*2. Conditionally execute SAS statements.*/
/*? Use IF-THEN/ELSE statements to process data conditionally.*/

data cars_if_then;
   set cars_by_price_high;
   
   if origin in ('Asia', 'Europe' ) then do;
      import = 'YES';
   end;
   else do;
      import = 'NO';
   end;
   
run;


/* Use DO and END statements to execute multiple statements conditionally. */

data baseball_do_loop (drop = i);
   set sashelp.baseball (keep = team);
   
   do i = 1 to 5;
      length = length(team) * i;
      output;
   end;
   
run;


/*3. Use assignment statements in the DATA step.*/
/*? Create new variables and assign a value.*/

data versicolor;
   set sashelp.iris (where=(species='Versicolor'));
   
   petalArea = petalLength * petalWidth;
   
run;




/*? Assign a new value to an existing variable.*/

data versicolor;
   set versicolor;
   
   petalArea = petalArea / 10;
   
run;


/*? Assign the value of an expression to a variable.*/

data versicolor;
   set versicolor;
   
   size = 'large';
   if petalArea < 48 then size = 'small';
   
run;

/*? Assign a constant date value to a variable. */

data versicolor;
   set versicolor;
   
   format dateUpdated MONYY5.;
   dateUpdated = today();
   
run;


/*4. Modify variable attributes using options and statements in the DATA step.*/

/*- Change the names of variables by using the RENAME= data set option.*/
data versicolor;
   set versicolor (rename = size=leafsize);
run;

/*- Use LABEL and FORMAT statements to modify attributes in a DATA step.*/
data baseball;
   set sashelp.baseball (keep = name nrbi nhome salary);
   
   label salary = 'Salary in Thousands of US Dollars';
   
   format salary dollar10.2;
   
run;


/*- Define the length of a variable using the LENGTH statement.*/

data baseball;
   set baseball;
   
   length shortname $4.;
   
   shortname = name;
   
run;    


/*5. Accumulate sub-totals and totals using DATA step statements.*/
/*- Use the BY statement to aggregate by subgroups.*/
/*- Use first. and last. processing to identify where groups begin and end.*/   
/*- Use the RETAIN and SUM statements.*/
proc sort data=sashelp.cars out=cars_inventory;
   by make model;
run;

data cars_inventory;
   set cars_inventory (keep=make model msrp invoice);
   
   by make model;
   
   if first.make then model_id =0;
   
   model_id + 1; /* example of the sum statement */
  
   retain model_id; /*retain statement*/
  
run;  
   
proc sort data=sashelp.cars out=cars_inventory2;
   by make msrp;
run;

data cars_inventory2; /*last. processing example*/
   set cars_inventory2 (keep=make model msrp invoice);
   
   by make msrp;
  
   most_expensive='NO';
   
   if last.make then most_expensive='YES';
  
   retain most_expensive; /*retain statement*/
  
run;  












/*6.Use SAS functions to manipulate character data, numeric data, and SAS date values.*/
/*- Use SAS functions such as SCAN, SUBSTR, TRIM, UPCASE, and LOWCASE to perform*/
/*tasks such as the tasks shown below.*/
/*o Replace the contents of a character value.*/
/*o Trim trailing blanks from a character value.*/
/*o Search a character value and extract a portion of the value.*/
/*o Convert a character value to upper or lowercase.*/

data baseball;
   set sashelp.baseball (keep= name team yrmajor);
   
      first_name = scan(name, -1, ' ');
      last_name = scan(name, 1, ',');
      
run;

data baseball;
   set baseball;
   
   team_code = substr(team, 1, 3);
   team_upper = upcase(team);
   team_lower = lowcase(team);
   
run;

data baseball;
   set baseball;
   
   team_trailing_blanks = cat(team, '           ');
   team_no_whitespace = trim(team_trailing_blanks);
   
run;

data baseball;
   set baseball;
   
   yrmajor_char = put(yrmajor, $3.);
   
run;

/*- Use SAS numeric functions such as SUM, MEAN, RAND, SMALLEST, LARGEST, ROUND,*/
/*and INT.*/
data applianc;
   set sashelp.applianc;
   
   applianc_sum = sum(of units_1-units_24);
   applianc_mean = mean(of units_1-units_24);
   
   applianc_sum_dec = applianc_sum*0.99999;
   applianc_sum_round = round(applianc_sum_dec);
   
run;

data applianc;
   set sashelp.applianc;
   
   largest_1 = largest(1, of units_1-units_24);
   largest_5 = largest(5, of units_1-units_24);
   
   rand1 = rand('normal');
   
   smallest_1 = smallest(1, of units_1-units_24);
   smallest_5 = smallest(5, of units_1-units_24);
run;


/*- Create SAS date values by using the functions MDY, TODAY, DATE, and TIME.*/
/*- Extract the month, year, and interval from a SAS date value by using the functions*/
/*YEAR, QTR, MONTH, and DAY.*/

data retail;
   set sashelp.retail (drop=date);
   
   date = mdy(month,day, year);
   
run;

data retail;
   set retail (drop = day month year);
   
   month = month(date);
   day = day(date);
   year = year(date);

run;
/*? Perform calculations with date and datetime values and time intervals by using the*/
/*functions INTCK, INTNX, DATDIF and YRDIF. */

data retail;
   set retail;
   
   days_before = intck('day', today(), date);
   years_before = intck('year', today(), date);
   
   years_later_40 = intnx('year', date, 40);
   
   date_difference = datdif(date, today(), 'act/act');
   year_difference = yrdif(date, today(), 'act/act');
run;

/*7. Use SAS functions to convert character data to numeric and vice versa.*/
/*- Explain the automatic conversion that SAS uses to convert values between data types.*/
data mycars;
   input make $ model $ mpg_highway $;
   datalines;
Acurra MDX 25
Buick Regal 20
GMC Yukon 14
;
run;

proc contents data=mycars; 
run;

data mycars_1;
   set mycars;
   
   mpg_highway_num = mpg_highway * 1;
   
run;

proc contents data=mycars_1; 
run;


/*- Use the INPUT function to explicitly convert character data values to numeric values.*/
data mycars_2;
   set mycars;
   
   mpg_highway_num = input(mpg_highway, 6.);
   
run;

proc contents data=mycars_2; 
run;

/*- Use the PUT function to explicitly convert numeric data values to character values.*/

data mycars_3;
   set mycars_2;
   
   mpg_highway_str = put(mpg_highway_num, $6.);
   
run;

proc contents data=mycars_3; 
run;


/*Process data using DO LOOPS.*/
/*- Explain how iterative DO loops function.*/
data ice_cream_sales;
   sales = 0;
   
   do sales = 1 to 100 by 2;
      total = sales * 1.5;
      output;
   end;
   
run;


/*- Use DO loops to eliminate redundant code and to perform repetitive calculations.*/
/*- Use conditional DO loops.*/

data ice_cream_sale_while;
   inventory = 350;
   total = 0;
   do while(inventory > 0);
       inventory = inventory - 1;
       total = total + 0.75;
       output;
   end;
run;
/*- Use nested DO loops.*/

data ice_cream_id;

   do i = 1 to 7;
   
      ice_cream_id = i;
      do j = 1 to 5;
      
         topping_id = j;
         output;
      end;
   end;
   drop i j;
   
run;

/*8. Restructure SAS data sets with PROC TRANSPOSE.*/
/*- Select variables to transpose with the VAR statement.*/

proc transpose data=sashelp.shoes;

   var inventory;
   
run;
  
/*- Rename transposed variables with the ID statement.*/
/*- Process data within groups using the BY statement.*/
proc sort data=sashelp.shoes out=shoes;
   by subsidiary;
run;

proc transpose data=shoes;

   var inventory;
   by subsidiary;
   id product;
   
run;



/*- Use PROC TRANSPOSE options (OUT=, PREFIX= and NAME=).*/

proc transpose data=shoes out=shoesT prefix=group name=category;
   
run;


/*9. Use macro variables to simplify program maintenance.*/
/*- Create macro variables with the %LET statement*/


%let name = pat;
%put name = &name.;
%let date = %sysfunc(today());
%put date = &date.;

/*- Use macro variables within SAS programs. */
%let audit_id = 17;
%put audit_id = &audit_id.;

data shoest_modified;
   set shoesT;
   
   format modified_date ddmmyy10.;
   
   modified_date = 22000;
   modified_by = .;
   
   if category eq "Returns" then do;
      group1 = group1 + 10000;
      modified_date = &date.;
      modified_by = &audit_id.;
   end;
   
run;


/* Section 3 - Error Handling */

/* Identify and resolve programming logic errors. */
/* • Use the PUTLOG Statement in the Data Step to help identify logic errors. */

%let student_name = Pat;
%let height = 70;
%let weight = 120;
%let age = 15;
%let sex = M;

data new_student;
   set sashelp.class (obs=1);
   
   name = symget('student_name');
   weight = &weight;
   age = &age.;
   sex = symget('sex');
   
   if &height. not in (12:100) then do;
      height = .;
      putlog "NOTE: The height is not a valid number. It has been set to missing.";
   end;
   
   else do;
      height = &height.;
      putlog "NOTE: The height is a valid number. It has been set to &height..";
   end;
   
run;  
   



/* • Use PUTLOG to write the value of a variable, formatted values, or to write values of all */
/* variables. */

data class_updated;
   set sashelp.class new_student;
   
   putlog "NOTE: Their name is " name ;
   putlog "NOTE: Their Age is " age ;
   
run;

/* • Use PUTLOG with Conditional logic. */

data class_updated;
   set class_updated;
  
   if age ge 15 then do;
   
      putlog "NOTE: Their name is " name ;
      putlog "NOTE: Their Age is " age ;
   
   end;
   
run;


/* • Use temporary variables N and ERROR to debug a DATA step. */

data class_updated;
   set class_updated (obs=5);
   
      putlog _N_ ;
      putlog name;
      putlog _ERROR_ ;
   
   
run;


/* Recognize and correct syntax errors. */


/* • Identify the characteristics of SAS statements. */
/*  */
/* NO CODE: */
/* "A SAS statement is a string of SAS keywords, SAS names, special characters, and */
/* operators that instructs SAS to perform an operation or that gives information to */
/* SAS. Each SAS statement ends with a semicolon." */
/* Source: https://documentation.sas.com/api/docsets/lestmtsref/9.4/content/lestmtsref.pdf?locale=en */

/* • Define SAS syntax rules including the typical types of syntax errors such as misspelled */
/* keywords, unmatched quotation marks, missing semicolons, and invalid options. */

dota mycars;
   set sashelp.cars;
run;

/* not valid option */
data mycars;
   set sashelp.cars(notvalidoption=this);
run;

/* missing semicolon */
data mycars;
   set sashelp.cars;
run;

/* • Use the log to help diagnose syntax errors in a given program.  */
/* no code */





/*Section 4 - Generate Reports and Output */


/*1. Generate list reports using the PRINT procedure.*/
proc print data=sashelp.cars(obs=5);
run;

/*• Modify the default behavior of PROC PRINT by adding statements and options such as*/
/*o use the VAR statement to select and order variables.*/
proc print data=sashelp.cars(obs=5);
   var make model msrp invoice;
run;

/*o calculate totals with a SUM statement.*/
proc print data=sashelp.cars(obs=5);
   var make model msrp invoice;
   sum msrp invoice;
run;

/*o select observations with a WHERE statement.*/
proc print data=sashelp.cars(obs=50);
   where type = 'SUV';
   var type make model msrp invoice;
   sum msrp invoice;
run;

/*o use the ID statement to identify observations.*/
proc print data=sashelp.cars(obs=50);
   id type;
   var make model msrp invoice;
   sum msrp invoice;
run;
 

/*o use the BY statement to process groups.*/
proc sort data=sashelp.cars out=cars;
   by type;
run;

proc print data=cars(obs=20);
   by type;
   var make model msrp invoice;
   sum msrp invoice;
run;


/*Generate summary reports and frequency tables using base SAS procedures.*/

/*• Produce one-way and two-way frequency tables with the FREQ procedure.*/
proc freq data=sashelp.class;
   tables age;
run;

proc freq data=sashelp.class;
   tables age*sex;
run;   
 

/*• Enhance frequency tables with options (NLEVELS, ORDER=).*/
proc freq data=sashelp.class nlevels;
run;

proc freq data=sashelp.class order=freq;
   tables age;
run;
 

/*• Use PROC FREQ to validate data in a SAS data set.*/

%let student_name = Pat;
%let height = 70;
%let weight = 120;
%let age = 35;
%let sex = M;

data new_student;
   set sashelp.class(obs=1);
   
   name = symget('student_name');
   weight = &weight;
   age = &age.;
   sex = symget('sex');
   height = &height.;
run;

data class_updated;
   set sashelp.class new_student;
run;

proc freq data=class_updated;
   tables age;
run;


/*• Calculate summary statistics and multilevel summaries using the MEANS procedure*/

proc means data=sashelp.baseball;
run;

/*• Enhance summary tables with options.*/

proc means data=sashelp.baseball(where=(league='National')) mean;
   class division team;
   types division*team;
   var nHome;
run;

/*• Identify extreme and missing values with the UNIVARIATE procedure. */

proc univariate data=class_updated;
   var age;
run;


 
/*3 - Enhance reports system user-defined formats, titles, footnotes and SAS System reporting options.*/

/*• Use PROC FORMAT to define custom formats.*/
/*o VALUE statement*/
proc format;
   value prices
      low-15000 = 'low price'
      15001-45000 = 'mid price'
      45001-high = 'high price'
  ;
run;

data cars;
   set sashelp.cars(keep=make model msrp);
   
   price = put(msrp, prices.);
   
run;
   
/*o CNTLIN= option*/

data bbformat;
   input fmtname $ start end label $;
   datalines;
hr_group 1 10 low
hr_group 11 29 midrange
hr_group 30 90 slugger
;
run;

proc format cntlin=bbformat;
run;

proc freq data=sashelp.baseball;
   table nHome;
   format nHome hr_group.;
run;
 

/*• Use the LABEL statement to define descriptive column headings.*/

proc print data=sashelp.cars (obs=10);
   var make model msrp;
run;

data cars;
   set sashelp.cars;
   label msrp = 'Recommended Retail Price (in USD)';
run;

proc contents data=cars;
run;


/*• Control the use of column headings with the LABEL and SPLIT=options in PROC PRINT*/

proc print data=cars (obs=10) label;
   var make model msrp;
run;

/*split = option specifies a line break*/
proc print data=cars (obs=10) split='(';
   var make model msrp;
run;



/*4 - Generate reports using ODS statements.*/

/*• Identify the Output Delivery System destinations.*/
/*• Create HTML, PDF, RTF, and files with ODS statements.*/
/* ods html file='my_report.html'; */
ods html file='/folders/myfolders/my_report.html';
   proc print data=cars (obs=10) label;
      var make model msrp;
   run;
ods html close;

/* ods pdf file='my_report.pdf'; */
ods pdf file='/folders/myfolders/my_report.pdf';
   proc print data=cars (obs=10) label;
      var make model msrp;
   run;
ods pdf close;

/* ods rtf file='my_report.rtf'; */
ods rtf file='/folders/myfolders/my_report.rtf';
   proc print data=cars (obs=10) label;
      var make model msrp;
   run;
ods rtf close;

/*• Use the STYLE=option to specify a style template.*/
ods rtf file='/folders/myfolders/my_report_bp.rtf' style=Blockprint;
   proc print data=cars (obs=10) label;
      var make model msrp;
   run;
ods rtf close;
 



/*• Create files that can be viewed in Microsoft Excel.*/

ods excel file='/folders/myfolders/my_report.xlsx';
   proc print data=cars (obs=10) label;
      var make model msrp;
   run;
ods excel close;
 

/*Export data*/

/*• Create a simple raw data file by using the EXPORT procedure as an alternative to the DATA step.*/
proc export data=cars
            outfile='/folders/myfolders/cars.csv'
            dbms=csv replace;
   putnames=yes;
run;


/*• Export data to Microsoft Excel using the SAS/ACCESS XLSX engine.*/

libname xlsxout xlsx '/folders/myfolders/new_cars.xlsx';

data xlsxout.cars;
   set cars;
run;
/*Section 4 - Generate Reports and Output */


/*1. Generate list reports using the PRINT procedure.*/
proc print data=sashelp.cars(obs=5);
run;

/*• Modify the default behavior of PROC PRINT by adding statements and options such as*/
/*o use the VAR statement to select and order variables.*/
proc print data=sashelp.cars(obs=5);
   var make model msrp invoice;
run;

/*o calculate totals with a SUM statement.*/
proc print data=sashelp.cars(obs=5);
   var make model msrp invoice;
   sum msrp invoice;
run;

/*o select observations with a WHERE statement.*/
proc print data=sashelp.cars(obs=50);
   where type = 'SUV';
   var type make model msrp invoice;
   sum msrp invoice;
run;

/*o use the ID statement to identify observations.*/
proc print data=sashelp.cars(obs=50);
   id type;
   var make model msrp invoice;
   sum msrp invoice;
run;
 

/*o use the BY statement to process groups.*/
proc sort data=sashelp.cars out=cars;
   by type;
run;

proc print data=cars(obs=20);
   by type;
   var make model msrp invoice;
   sum msrp invoice;
run;


/*Generate summary reports and frequency tables using base SAS procedures.*/

/*• Produce one-way and two-way frequency tables with the FREQ procedure.*/
proc freq data=sashelp.class;
   tables age;
run;

proc freq data=sashelp.class;
   tables age*sex;
run;   
 

/*• Enhance frequency tables with options (NLEVELS, ORDER=).*/
proc freq data=sashelp.class nlevels;
run;

proc freq data=sashelp.class order=freq;
   tables age;
run;
 

/*• Use PROC FREQ to validate data in a SAS data set.*/

%let student_name = Pat;
%let height = 70;
%let weight = 120;
%let age = 35;
%let sex = M;

data new_student;
   set sashelp.class(obs=1);
   
   name = symget('student_name');
   weight = &weight;
   age = &age.;
   sex = symget('sex');
   height = &height.;
run;

data class_updated;
   set sashelp.class new_student;
run;

proc freq data=class_updated;
   tables age;
run;


/*• Calculate summary statistics and multilevel summaries using the MEANS procedure*/

proc means data=sashelp.baseball;
run;

/*• Enhance summary tables with options.*/

proc means data=sashelp.baseball(where=(league='National')) mean;
   class division team;
   types division*team;
   var nHome;
run;

/*• Identify extreme and missing values with the UNIVARIATE procedure. */

proc univariate data=class_updated;
   var age;
run;


 
/*3 - Enhance reports system user-defined formats, titles, footnotes and SAS System reporting options.*/

/*• Use PROC FORMAT to define custom formats.*/
/*o VALUE statement*/
proc format;
   value prices
      low-15000 = 'low price'
      15001-45000 = 'mid price'
      45001-high = 'high price'
  ;
run;

data cars;
   set sashelp.cars(keep=make model msrp);
   
   price = put(msrp, prices.);
   
run;
   
/*o CNTLIN= option*/

data bbformat;
   input fmtname $ start end label $;
   datalines;
hr_group 1 10 low
hr_group 11 29 midrange
hr_group 30 90 slugger
;
run;

proc format cntlin=bbformat;
run;

proc freq data=sashelp.baseball;
   table nHome;
   format nHome hr_group.;
run;
 

/*• Use the LABEL statement to define descriptive column headings.*/

proc print data=sashelp.cars (obs=10);
   var make model msrp;
run;

data cars;
   set sashelp.cars;
   label msrp = 'Recommended Retail Price (in USD)';
run;

proc contents data=cars;
run;


/*• Control the use of column headings with the LABEL and SPLIT=options in PROC PRINT*/

proc print data=cars (obs=10) label;
   var make model msrp;
run;

/*split = option specifies a line break*/
proc print data=cars (obs=10) split='(';
   var make model msrp;
run;



/*4 - Generate reports using ODS statements.*/

/*• Identify the Output Delivery System destinations.*/
/*• Create HTML, PDF, RTF, and files with ODS statements.*/
/* ods html file='my_report.html'; */
ods html file='/folders/myfolders/my_report.html';
   proc print data=cars (obs=10) label;
      var make model msrp;
   run;
ods html close;

/* ods pdf file='my_report.pdf'; */
ods pdf file='/folders/myfolders/my_report.pdf';
   proc print data=cars (obs=10) label;
      var make model msrp;
   run;
ods pdf close;

/* ods rtf file='my_report.rtf'; */
ods rtf file='/folders/myfolders/my_report.rtf';
   proc print data=cars (obs=10) label;
      var make model msrp;
   run;
ods rtf close;

/*• Use the STYLE=option to specify a style template.*/
ods rtf file='/folders/myfolders/my_report_bp.rtf' style=Blockprint;
   proc print data=cars (obs=10) label;
      var make model msrp;
   run;
ods rtf close;
 



/*• Create files that can be viewed in Microsoft Excel.*/

ods excel file='/folders/myfolders/my_report.xlsx';
   proc print data=cars (obs=10) label;
      var make model msrp;
   run;
ods excel close;
 

/*Export data*/

/*• Create a simple raw data file by using the EXPORT procedure as an alternative to the DATA step.*/
proc export data=cars
            outfile='/folders/myfolders/cars.csv'
            dbms=csv replace;
   putnames=yes;
run;


/*• Export data to Microsoft Excel using the SAS/ACCESS XLSX engine.*/

libname xlsxout xlsx '/folders/myfolders/new_cars.xlsx';

data xlsxout.cars;
   set cars;
run;





/* Section 1 - Access and Create Data Structures */

/* 1. Create temporary and permanent SAS data sets. */
/* • Use a DATA step to create a SAS data set from an existing SAS data set. */

data mycars; /*temporary dataset in my work library*/
   input make $ model $ mpg_highway;
   datalines;
Acurra MDX 23
Buick Regal 20
GMC Yukon 16
;
run;

data iris;
   set sashelp.iris;
run;

libname mylib "/folders/myfolders";
/* libname badlib "/folders/myfolders/badlib"; */

data mylib.iris;
   set iris;
run;


/* 2. Investigate SAS data libraries using base SAS utility procedures. */
/* • Use a LIBNAME statement to assign a library reference name to a SAS library. */
/* • Investigate a library programmatically using the CONTENTS procedure. */

proc contents data=sashelp.cars directory;
run;

/* Access data */
/* • Access SAS data sets with the SET statement. */

data baseball;
   set sashelp.baseball;
   if team = 'Cleveland';
run;

/* • Use PROC IMPORT to access non-SAS data sources. */
proc export data=baseball
            outfile="/folders/myfolders/baseball.xlsx"
            dbms=xlsx replace;
            sheet="baseball";
run;

proc export data=baseball
            outfile="/folders/myfolders/baseball.csv"
            dbms=csv replace;

run; 

    
/* o Read delimited and Microsoft Excel (.xlsx) files with PROC IMPORT. */

proc import out=baseball_import
            datafile='/folders/myfolders/baseball.xlsx'
            dbms=xlsx replace;
            sheet = 'baseball';
            getnames=yes;
run;
/* o Use PROC IMPORT statement options (OUT=, DBMS=, REPLACE) */
/* o Use the GUESSINGROWS statement */
proc import out=baseball_csv_import
            datafile='/folders/myfolders/baseball.csv'
            dbms=csv replace;
            getnames=yes;
/*             guessingrows=2;  */
run;

proc contents data=baseball_csv_import;
run;

/* • Use the SAS/ACCESS XLSX engine to read a Microsoft Excel workbook.xlsx file. */

libname myxlsx xlsx "/folders/myfolders/baseball.xlsx";

/* 3. Combine SAS data sets. */

/* • Concatenate data sets. */
data concat;
   set sashelp.iris(where=(species='Setosa')) sashelp.iris(where=(species='Versicolor'));
run;

/* • Merge data sets one-to-one. */
data one_to_one;
   merge sashelp.buy(in=a) sashelp.countseries (in=b);
   by date;
   if a and b;
run;

/* • Merge data sets one-to-many. */
data one_to_many;
   merge sashelp.buy(in=a) sashelp.countseries (in=b);
   by date;
   if a and b;
run;

/* 4. Create and manipulate SAS date values. */
/* • Explain how SAS stores date and time values. */
/* • Use SAS informats to read common date and time expressions. */
/* • Use SAS date and time formats to specify how the values are displayed. */

data air;
   set sashelp.air;
   
   date0=date*1; 
   day = day(date);
   month = month(date);
   year = year(date);
   time = time();
   date_time = dhms(date, 0, 0, 0);
   
   format date_time datetime20.;

run;

/* 5.Control which observations and variables in a SAS data set are processed and */
/* output. */
/* • Use the WHERE statement in the DATA step to select observations to be processed. */
data iris;
   set sashelp.iris;
   
   where species = 'Setosa';
   
run;

/* • Subset variables to be output by using the DROP and KEEP statements. */

data baseball;
   set sashelp.baseball;
   
/*    keep name logsalary; */
   drop name logsalary;
   
run;
/* • Use the DROP= and KEEP= data set options to specify columns to be processed and/or */
/* output. */
data baseball;
   set sashelp.baseball (keep = name logsalary nhits natbat drop=logsalary);
run;   





/*Section 2 - Manage Data */

/*1.Sort observations in a SAS data set.*/
/*- Use the SORT Procedure to re-order observations in place or output to a new dataset with the OUT= option.*/
proc sort data=sashelp.cars
          out=cars_by_price;
   by msrp;
run;

proc sort data=sashelp.cars
          out=cars_by_price_high;
   by descending msrp;
run;

/*- Remove duplicate observations with the SORT Procedure.*/
data duplicate;
   set cars_by_price cars_by_price;
run;    

proc sort data=duplicate nodup
          out=deduped;
   by make model msrp;
run; 


/*2. Conditionally execute SAS statements.*/
/*? Use IF-THEN/ELSE statements to process data conditionally.*/

data cars_if_then;
   set cars_by_price_high;
   
   if origin in ('Asia', 'Europe' ) then do;
      import = 'YES';
   end;
   else do;
      import = 'NO';
   end;
   
run;


/* Use DO and END statements to execute multiple statements conditionally. */

data baseball_do_loop (drop = i);
   set sashelp.baseball (keep = team);
   
   do i = 1 to 5;
      length = length(team) * i;
      output;
   end;
   
run;


/*3. Use assignment statements in the DATA step.*/
/*? Create new variables and assign a value.*/

data versicolor;
   set sashelp.iris (where=(species='Versicolor'));
   
   petalArea = petalLength * petalWidth;
   
run;




/*? Assign a new value to an existing variable.*/

data versicolor;
   set versicolor;
   
   petalArea = petalArea / 10;
   
run;


/*? Assign the value of an expression to a variable.*/

data versicolor;
   set versicolor;
   
   size = 'large';
   if petalArea < 48 then size = 'small';
   
run;

/*? Assign a constant date value to a variable. */

data versicolor;
   set versicolor;
   
   format dateUpdated MONYY5.;
   dateUpdated = today();
   
run;


/*4. Modify variable attributes using options and statements in the DATA step.*/

/*- Change the names of variables by using the RENAME= data set option.*/
data versicolor;
   set versicolor (rename = size=leafsize);
run;

/*- Use LABEL and FORMAT statements to modify attributes in a DATA step.*/
data baseball;
   set sashelp.baseball (keep = name nrbi nhome salary);
   
   label salary = 'Salary in Thousands of US Dollars';
   
   format salary dollar10.2;
   
run;


/*- Define the length of a variable using the LENGTH statement.*/

data baseball;
   set baseball;
   
   length shortname $4.;
   
   shortname = name;
   
run;    


/*5. Accumulate sub-totals and totals using DATA step statements.*/
/*- Use the BY statement to aggregate by subgroups.*/
/*- Use first. and last. processing to identify where groups begin and end.*/   
/*- Use the RETAIN and SUM statements.*/
proc sort data=sashelp.cars out=cars_inventory;
   by make model;
run;

data cars_inventory;
   set cars_inventory (keep=make model msrp invoice);
   
   by make model;
   
   if first.make then model_id =0;
   
   model_id + 1; /* example of the sum statement */
  
   retain model_id; /*retain statement*/
  
run;  
   
proc sort data=sashelp.cars out=cars_inventory2;
   by make msrp;
run;

data cars_inventory2; /*last. processing example*/
   set cars_inventory2 (keep=make model msrp invoice);
   
   by make msrp;
  
   most_expensive='NO';
   
   if last.make then most_expensive='YES';
  
   retain most_expensive; /*retain statement*/
  
run;  












/*6.Use SAS functions to manipulate character data, numeric data, and SAS date values.*/
/*- Use SAS functions such as SCAN, SUBSTR, TRIM, UPCASE, and LOWCASE to perform*/
/*tasks such as the tasks shown below.*/
/*o Replace the contents of a character value.*/
/*o Trim trailing blanks from a character value.*/
/*o Search a character value and extract a portion of the value.*/
/*o Convert a character value to upper or lowercase.*/

data baseball;
   set sashelp.baseball (keep= name team yrmajor);
   
      first_name = scan(name, -1, ' ');
      last_name = scan(name, 1, ',');
      
run;

data baseball;
   set baseball;
   
   team_code = substr(team, 1, 3);
   team_upper = upcase(team);
   team_lower = lowcase(team);
   
run;

data baseball;
   set baseball;
   
   team_trailing_blanks = cat(team, '           ');
   team_no_whitespace = trim(team_trailing_blanks);
   
run;

data baseball;
   set baseball;
   
   yrmajor_char = put(yrmajor, $3.);
   
run;

/*- Use SAS numeric functions such as SUM, MEAN, RAND, SMALLEST, LARGEST, ROUND,*/
/*and INT.*/
data applianc;
   set sashelp.applianc;
   
   applianc_sum = sum(of units_1-units_24);
   applianc_mean = mean(of units_1-units_24);
   
   applianc_sum_dec = applianc_sum*0.99999;
   applianc_sum_round = round(applianc_sum_dec);
   
run;

data applianc;
   set sashelp.applianc;
   
   largest_1 = largest(1, of units_1-units_24);
   largest_5 = largest(5, of units_1-units_24);
   
   rand1 = rand('normal');
   
   smallest_1 = smallest(1, of units_1-units_24);
   smallest_5 = smallest(5, of units_1-units_24);
run;


/*- Create SAS date values by using the functions MDY, TODAY, DATE, and TIME.*/
/*- Extract the month, year, and interval from a SAS date value by using the functions*/
/*YEAR, QTR, MONTH, and DAY.*/

data retail;
   set sashelp.retail (drop=date);
   
   date = mdy(month,day, year);
   
run;

data retail;
   set retail (drop = day month year);
   
   month = month(date);
   day = day(date);
   year = year(date);

run;
/*? Perform calculations with date and datetime values and time intervals by using the*/
/*functions INTCK, INTNX, DATDIF and YRDIF. */

data retail;
   set retail;
   
   days_before = intck('day', today(), date);
   years_before = intck('year', today(), date);
   
   years_later_40 = intnx('year', date, 40);
   
   date_difference = datdif(date, today(), 'act/act');
   year_difference = yrdif(date, today(), 'act/act');
run;

/*7. Use SAS functions to convert character data to numeric and vice versa.*/
/*- Explain the automatic conversion that SAS uses to convert values between data types.*/
data mycars;
   input make $ model $ mpg_highway $;
   datalines;
Acurra MDX 25
Buick Regal 20
GMC Yukon 14
;
run;

proc contents data=mycars; 
run;

data mycars_1;
   set mycars;
   
   mpg_highway_num = mpg_highway * 1;
   
run;

proc contents data=mycars_1; 
run;


/*- Use the INPUT function to explicitly convert character data values to numeric values.*/
data mycars_2;
   set mycars;
   
   mpg_highway_num = input(mpg_highway, 6.);
   
run;

proc contents data=mycars_2; 
run;

/*- Use the PUT function to explicitly convert numeric data values to character values.*/

data mycars_3;
   set mycars_2;
   
   mpg_highway_str = put(mpg_highway_num, $6.);
   
run;

proc contents data=mycars_3; 
run;


/*Process data using DO LOOPS.*/
/*- Explain how iterative DO loops function.*/
data ice_cream_sales;
   sales = 0;
   
   do sales = 1 to 100 by 2;
      total = sales * 1.5;
      output;
   end;
   
run;


/*- Use DO loops to eliminate redundant code and to perform repetitive calculations.*/
/*- Use conditional DO loops.*/

data ice_cream_sale_while;
   inventory = 350;
   total = 0;
   do while(inventory > 0);
       inventory = inventory - 1;
       total = total + 0.75;
       output;
   end;
run;
/*- Use nested DO loops.*/

data ice_cream_id;

   do i = 1 to 7;
   
      ice_cream_id = i;
      do j = 1 to 5;
      
         topping_id = j;
         output;
      end;
   end;
   drop i j;
   
run;

/*8. Restructure SAS data sets with PROC TRANSPOSE.*/
/*- Select variables to transpose with the VAR statement.*/

proc transpose data=sashelp.shoes;

   var inventory;
   
run;
  
/*- Rename transposed variables with the ID statement.*/
/*- Process data within groups using the BY statement.*/
proc sort data=sashelp.shoes out=shoes;
   by subsidiary;
run;

proc transpose data=shoes;

   var inventory;
   by subsidiary;
   id product;
   
run;



/*- Use PROC TRANSPOSE options (OUT=, PREFIX= and NAME=).*/

proc transpose data=shoes out=shoesT prefix=group name=category;
   
run;


/*9. Use macro variables to simplify program maintenance.*/
/*- Create macro variables with the %LET statement*/


%let name = pat;
%put name = &name.;
%let date = %sysfunc(today());
%put date = &date.;

/*- Use macro variables within SAS programs. */
%let audit_id = 17;
%put audit_id = &audit_id.;

data shoest_modified;
   set shoesT;
   
   format modified_date ddmmyy10.;
   
   modified_date = 22000;
   modified_by = .;
   
   if category eq "Returns" then do;
      group1 = group1 + 10000;
      modified_date = &date.;
      modified_by = &audit_id.;
   end;
   
run;


/* Section 3 - Error Handling */

/* Identify and resolve programming logic errors. */
/* • Use the PUTLOG Statement in the Data Step to help identify logic errors. */

%let student_name = Pat;
%let height = 70;
%let weight = 120;
%let age = 15;
%let sex = M;

data new_student;
   set sashelp.class (obs=1);
   
   name = symget('student_name');
   weight = &weight;
   age = &age.;
   sex = symget('sex');
   
   if &height. not in (12:100) then do;
      height = .;
      putlog "NOTE: The height is not a valid number. It has been set to missing.";
   end;
   
   else do;
      height = &height.;
      putlog "NOTE: The height is a valid number. It has been set to &height..";
   end;
   
run;  
   



/* • Use PUTLOG to write the value of a variable, formatted values, or to write values of all */
/* variables. */

data class_updated;
   set sashelp.class new_student;
   
   putlog "NOTE: Their name is " name ;
   putlog "NOTE: Their Age is " age ;
   
run;

/* • Use PUTLOG with Conditional logic. */

data class_updated;
   set class_updated;
  
   if age ge 15 then do;
   
      putlog "NOTE: Their name is " name ;
      putlog "NOTE: Their Age is " age ;
   
   end;
   
run;


/* • Use temporary variables N and ERROR to debug a DATA step. */

data class_updated;
   set class_updated (obs=5);
   
      putlog _N_ ;
      putlog name;
      putlog _ERROR_ ;
   
   
run;


/* Recognize and correct syntax errors. */


/* • Identify the characteristics of SAS statements. */
/*  */
/* NO CODE: */
/* "A SAS statement is a string of SAS keywords, SAS names, special characters, and */
/* operators that instructs SAS to perform an operation or that gives information to */
/* SAS. Each SAS statement ends with a semicolon." */
/* Source: https://documentation.sas.com/api/docsets/lestmtsref/9.4/content/lestmtsref.pdf?locale=en */

/* • Define SAS syntax rules including the typical types of syntax errors such as misspelled */
/* keywords, unmatched quotation marks, missing semicolons, and invalid options. */

dota mycars;
   set sashelp.cars;
run;

/* not valid option */
data mycars;
   set sashelp.cars(notvalidoption=this);
run;

/* missing semicolon */
data mycars;
   set sashelp.cars;
run;

/* • Use the log to help diagnose syntax errors in a given program.  */
/* no code */





/*Section 4 - Generate Reports and Output */


/*1. Generate list reports using the PRINT procedure.*/
proc print data=sashelp.cars(obs=5);
run;

/*• Modify the default behavior of PROC PRINT by adding statements and options such as*/
/*o use the VAR statement to select and order variables.*/
proc print data=sashelp.cars(obs=5);
   var make model msrp invoice;
run;

/*o calculate totals with a SUM statement.*/
proc print data=sashelp.cars(obs=5);
   var make model msrp invoice;
   sum msrp invoice;
run;

/*o select observations with a WHERE statement.*/
proc print data=sashelp.cars(obs=50);
   where type = 'SUV';
   var type make model msrp invoice;
   sum msrp invoice;
run;

/*o use the ID statement to identify observations.*/
proc print data=sashelp.cars(obs=50);
   id type;
   var make model msrp invoice;
   sum msrp invoice;
run;
 

/*o use the BY statement to process groups.*/
proc sort data=sashelp.cars out=cars;
   by type;
run;

proc print data=cars(obs=20);
   by type;
   var make model msrp invoice;
   sum msrp invoice;
run;


/*Generate summary reports and frequency tables using base SAS procedures.*/

/*• Produce one-way and two-way frequency tables with the FREQ procedure.*/
proc freq data=sashelp.class;
   tables age;
run;

proc freq data=sashelp.class;
   tables age*sex;
run;   
 

/*• Enhance frequency tables with options (NLEVELS, ORDER=).*/
proc freq data=sashelp.class nlevels;
run;

proc freq data=sashelp.class order=freq;
   tables age;
run;
 

/*• Use PROC FREQ to validate data in a SAS data set.*/

%let student_name = Pat;
%let height = 70;
%let weight = 120;
%let age = 35;
%let sex = M;

data new_student;
   set sashelp.class(obs=1);
   
   name = symget('student_name');
   weight = &weight;
   age = &age.;
   sex = symget('sex');
   height = &height.;
run;

data class_updated;
   set sashelp.class new_student;
run;

proc freq data=class_updated;
   tables age;
run;


/*• Calculate summary statistics and multilevel summaries using the MEANS procedure*/

proc means data=sashelp.baseball;
run;

/*• Enhance summary tables with options.*/

proc means data=sashelp.baseball(where=(league='National')) mean;
   class division team;
   types division*team;
   var nHome;
run;

/*• Identify extreme and missing values with the UNIVARIATE procedure. */

proc univariate data=class_updated;
   var age;
run;


 
/*3 - Enhance reports system user-defined formats, titles, footnotes and SAS System reporting options.*/

/*• Use PROC FORMAT to define custom formats.*/
/*o VALUE statement*/
proc format;
   value prices
      low-15000 = 'low price'
      15001-45000 = 'mid price'
      45001-high = 'high price'
  ;
run;

data cars;
   set sashelp.cars(keep=make model msrp);
   
   price = put(msrp, prices.);
   
run;
   
/*o CNTLIN= option*/

data bbformat;
   input fmtname $ start end label $;
   datalines;
hr_group 1 10 low
hr_group 11 29 midrange
hr_group 30 90 slugger
;
run;

proc format cntlin=bbformat;
run;

proc freq data=sashelp.baseball;
   table nHome;
   format nHome hr_group.;
run;
 

/*• Use the LABEL statement to define descriptive column headings.*/

proc print data=sashelp.cars (obs=10);
   var make model msrp;
run;

data cars;
   set sashelp.cars;
   label msrp = 'Recommended Retail Price (in USD)';
run;

proc contents data=cars;
run;


/*• Control the use of column headings with the LABEL and SPLIT=options in PROC PRINT*/

proc print data=cars (obs=10) label;
   var make model msrp;
run;

/*split = option specifies a line break*/
proc print data=cars (obs=10) split='(';
   var make model msrp;
run;



/*4 - Generate reports using ODS statements.*/

/*• Identify the Output Delivery System destinations.*/
/*• Create HTML, PDF, RTF, and files with ODS statements.*/
/* ods html file='my_report.html'; */
ods html file='/folders/myfolders/my_report.html';
   proc print data=cars (obs=10) label;
      var make model msrp;
   run;
ods html close;

/* ods pdf file='my_report.pdf'; */
ods pdf file='/folders/myfolders/my_report.pdf';
   proc print data=cars (obs=10) label;
      var make model msrp;
   run;
ods pdf close;

/* ods rtf file='my_report.rtf'; */
ods rtf file='/folders/myfolders/my_report.rtf';
   proc print data=cars (obs=10) label;
      var make model msrp;
   run;
ods rtf close;

/*• Use the STYLE=option to specify a style template.*/
ods rtf file='/folders/myfolders/my_report_bp.rtf' style=Blockprint;
   proc print data=cars (obs=10) label;
      var make model msrp;
   run;
ods rtf close;
 



/*• Create files that can be viewed in Microsoft Excel.*/

ods excel file='/folders/myfolders/my_report.xlsx';
   proc print data=cars (obs=10) label;
      var make model msrp;
   run;
ods excel close;
 

/*Export data*/

/*• Create a simple raw data file by using the EXPORT procedure as an alternative to the DATA step.*/
proc export data=cars
            outfile='/folders/myfolders/cars.csv'
            dbms=csv replace;
   putnames=yes;
run;


/*• Export data to Microsoft Excel using the SAS/ACCESS XLSX engine.*/

libname xlsxout xlsx '/folders/myfolders/new_cars.xlsx';

data xlsxout.cars;
   set cars;
run;
/*Section 4 - Generate Reports and Output */


/*1. Generate list reports using the PRINT procedure.*/
proc print data=sashelp.cars(obs=5);
run;

/*• Modify the default behavior of PROC PRINT by adding statements and options such as*/
/*o use the VAR statement to select and order variables.*/
proc print data=sashelp.cars(obs=5);
   var make model msrp invoice;
run;

/*o calculate totals with a SUM statement.*/
proc print data=sashelp.cars(obs=5);
   var make model msrp invoice;
   sum msrp invoice;
run;

/*o select observations with a WHERE statement.*/
proc print data=sashelp.cars(obs=50);
   where type = 'SUV';
   var type make model msrp invoice;
   sum msrp invoice;
run;

/*o use the ID statement to identify observations.*/
proc print data=sashelp.cars(obs=50);
   id type;
   var make model msrp invoice;
   sum msrp invoice;
run;
 

/*o use the BY statement to process groups.*/
proc sort data=sashelp.cars out=cars;
   by type;
run;

proc print data=cars(obs=20);
   by type;
   var make model msrp invoice;
   sum msrp invoice;
run;


/*Generate summary reports and frequency tables using base SAS procedures.*/

/*• Produce one-way and two-way frequency tables with the FREQ procedure.*/
proc freq data=sashelp.class;
   tables age;
run;

proc freq data=sashelp.class;
   tables age*sex;
run;   
 

/*• Enhance frequency tables with options (NLEVELS, ORDER=).*/
proc freq data=sashelp.class nlevels;
run;

proc freq data=sashelp.class order=freq;
   tables age;
run;
 

/*• Use PROC FREQ to validate data in a SAS data set.*/

%let student_name = Pat;
%let height = 70;
%let weight = 120;
%let age = 35;
%let sex = M;

data new_student;
   set sashelp.class(obs=1);
   
   name = symget('student_name');
   weight = &weight;
   age = &age.;
   sex = symget('sex');
   height = &height.;
run;

data class_updated;
   set sashelp.class new_student;
run;

proc freq data=class_updated;
   tables age;
run;


/*• Calculate summary statistics and multilevel summaries using the MEANS procedure*/

proc means data=sashelp.baseball;
run;

/*• Enhance summary tables with options.*/

proc means data=sashelp.baseball(where=(league='National')) mean;
   class division team;
   types division*team;
   var nHome;
run;

/*• Identify extreme and missing values with the UNIVARIATE procedure. */

proc univariate data=class_updated;
   var age;
run;


 
/*3 - Enhance reports system user-defined formats, titles, footnotes and SAS System reporting options.*/

/*• Use PROC FORMAT to define custom formats.*/
/*o VALUE statement*/
proc format;
   value prices
      low-15000 = 'low price'
      15001-45000 = 'mid price'
      45001-high = 'high price'
  ;
run;

data cars;
   set sashelp.cars(keep=make model msrp);
   
   price = put(msrp, prices.);
   
run;
   
/*o CNTLIN= option*/

data bbformat;
   input fmtname $ start end label $;
   datalines;
hr_group 1 10 low
hr_group 11 29 midrange
hr_group 30 90 slugger
;
run;

proc format cntlin=bbformat;
run;

proc freq data=sashelp.baseball;
   table nHome;
   format nHome hr_group.;
run;
 

/*• Use the LABEL statement to define descriptive column headings.*/

proc print data=sashelp.cars (obs=10);
   var make model msrp;
run;

data cars;
   set sashelp.cars;
   label msrp = 'Recommended Retail Price (in USD)';
run;

proc contents data=cars;
run;


/*• Control the use of column headings with the LABEL and SPLIT=options in PROC PRINT*/

proc print data=cars (obs=10) label;
   var make model msrp;
run;

/*split = option specifies a line break*/
proc print data=cars (obs=10) split='(';
   var make model msrp;
run;



/*4 - Generate reports using ODS statements.*/

/*• Identify the Output Delivery System destinations.*/
/*• Create HTML, PDF, RTF, and files with ODS statements.*/
/* ods html file='my_report.html'; */
ods html file='/folders/myfolders/my_report.html';
   proc print data=cars (obs=10) label;
      var make model msrp;
   run;
ods html close;

/* ods pdf file='my_report.pdf'; */
ods pdf file='/folders/myfolders/my_report.pdf';
   proc print data=cars (obs=10) label;
      var make model msrp;
   run;
ods pdf close;

/* ods rtf file='my_report.rtf'; */
ods rtf file='/folders/myfolders/my_report.rtf';
   proc print data=cars (obs=10) label;
      var make model msrp;
   run;
ods rtf close;

/*• Use the STYLE=option to specify a style template.*/
ods rtf file='/folders/myfolders/my_report_bp.rtf' style=Blockprint;
   proc print data=cars (obs=10) label;
      var make model msrp;
   run;
ods rtf close;
 



/*• Create files that can be viewed in Microsoft Excel.*/

ods excel file='/folders/myfolders/my_report.xlsx';
   proc print data=cars (obs=10) label;
      var make model msrp;
   run;
ods excel close;
 

/*Export data*/

/*• Create a simple raw data file by using the EXPORT procedure as an alternative to the DATA step.*/
proc export data=cars
            outfile='/folders/myfolders/cars.csv'
            dbms=csv replace;
   putnames=yes;
run;


/*• Export data to Microsoft Excel using the SAS/ACCESS XLSX engine.*/

libname xlsxout xlsx '/folders/myfolders/new_cars.xlsx';

data xlsxout.cars;
   set cars;
run;






/* 3. Combine SAS data sets. */

/* • Concatenate data sets. */
data concat;
  set sashelp.iris(where=(species='Setosa')) sashelp.iris(where=(species='Versicolor'));
run;

/* • Merge data sets one-to-one. */
data one_to_one;
  merge sashelp.buy(in=a) sashelp.countseries (in=b);
  by date;
  if a and b;
run;

/* • Merge data sets one-to-many. */
data one_to_many;
  merge sashelp.buy(in=a) sashelp.countseries (in=b);
  by date;
  if a and b;
run;

/* 4. Create and manipulate SAS date values. */
/* • Explain how SAS stores date and time values. */
/* • Use SAS informats to read common date and time expressions. */
/* • Use SAS date and time formats to specify how the values are displayed. */

data air;
  set sashelp.air;
 
  date0=date*1;
  day = day(date);
  month = month(date);
  year = year(date);
  time = time();
  date_time = dhms(date, 0, 0, 0);
 
  format date_time datetime20.;

run;

/* 5.Control which observations and variables in a SAS data set are processed and */
/* output. */
/* • Use the WHERE statement in the DATA step to select observations to be processed. */
data iris;
  set sashelp.iris;
 
  where species = 'Setosa';
 
run;

/* • Subset variables to be output by using the DROP and KEEP statements. */

data baseball;
  set sashelp.baseball;
 
/*    keep name logsalary; */
  drop name logsalary;
 
run;
/* • Use the DROP= and KEEP= data set options to specify columns to be processed and/or */
/* output. */
data baseball;
  set sashelp.baseball (keep = name logsalary nhits natbat drop=logsalary);
run;  





/*Section 2 - Manage Data */

/*1.Sort observations in a SAS data set.*/
/*- Use the SORT Procedure to re-order observations in place or output to a new dataset with the OUT= option.*/
proc sort data=sashelp.cars
         out=cars_by_price;
  by msrp;
run;

proc sort data=sashelp.cars
         out=cars_by_price_high;
  by descending msrp;
run;

/*- Remove duplicate observations with the SORT Procedure.*/
data duplicate;
  set cars_by_price cars_by_price;
run;   

proc sort data=duplicate nodup
         out=deduped;
  by make model msrp;
run;


/*2. Conditionally execute SAS statements.*/
/*? Use IF-THEN/ELSE statements to process data conditionally.*/

data cars_if_then;
  set cars_by_price_high;
 
  if origin in ('Asia', 'Europe' ) then do;
     import = 'YES';
  end;
  else do;
     import = 'NO';
  end;
 
run;


/* Use DO and END statements to execute multiple statements conditionally. */

data baseball_do_loop (drop = i);
  set sashelp.baseball (keep = team);
 
  do i = 1 to 5;
     length = length(team) * i;
     output;
  end;
 
run;


/*3. Use assignment statements in the DATA step.*/
/*? Create new variables and assign a value.*/

data versicolor;
  set sashelp.iris (where=(species='Versicolor'));
 
  petalArea = petalLength * petalWidth;
 
run;




/*? Assign a new value to an existing variable.*/

data versicolor;
  set versicolor;
 
  petalArea = petalArea / 10;
 
run;


/*? Assign the value of an expression to a variable.*/

data versicolor;
  set versicolor;
 
  size = 'large';
  if petalArea < 48 then size = 'small';
 
run;

/*? Assign a constant date value to a variable. */

data versicolor;
  set versicolor;
 
  format dateUpdated MONYY5.;
  dateUpdated = today();
 
run;


/*4. Modify variable attributes using options and statements in the DATA step.*/

/*- Change the names of variables by using the RENAME= data set option.*/
data versicolor;
  set versicolor (rename = size=leafsize);
run;

/*- Use LABEL and FORMAT statements to modify attributes in a DATA step.*/
data baseball;
  set sashelp.baseball (keep = name nrbi nhome salary);
 
  label salary = 'Salary in Thousands of US Dollars';
 
  format salary dollar10.2;
 
run;


/*- Define the length of a variable using the LENGTH statement.*/

data baseball;
  set baseball;
 
  length shortname $4.;
 
  shortname = name;
 
run;   


/*5. Accumulate sub-totals and totals using DATA step statements.*/
/*- Use the BY statement to aggregate by subgroups.*/
/*- Use first. and last. processing to identify where groups begin and end.*/  
/*- Use the RETAIN and SUM statements.*/
proc sort data=sashelp.cars out=cars_inventory;
  by make model;
run;

data cars_inventory;
  set cars_inventory (keep=make model msrp invoice);
 
  by make model;
 
  if first.make then model_id =0;
 
  model_id + 1; /* example of the sum statement */

  retain model_id; /*retain statement*/

run; 
 
proc sort data=sashelp.cars out=cars_inventory2;
  by make msrp;
run;

data cars_inventory2; /*last. processing example*/
  set cars_inventory2 (keep=make model msrp invoice);
 
  by make msrp;

  most_expensive='NO';
 
  if last.make then most_expensive='YES';

  retain most_expensive; /*retain statement*/

run; 












/*6.Use SAS functions to manipulate character data, numeric data, and SAS date values.*/
/*- Use SAS functions such as SCAN, SUBSTR, TRIM, UPCASE, and LOWCASE to perform*/
/*tasks such as the tasks shown below.*/
/*o Replace the contents of a character value.*/
/*o Trim trailing blanks from a character value.*/
/*o Search a character value and extract a portion of the value.*/
/*o Convert a character value to upper or lowercase.*/

data baseball;
  set sashelp.baseball (keep= name team yrmajor);
 
     first_name = scan(name, -1, ' ');
     last_name = scan(name, 1, ',');
    
run;

data baseball;
  set baseball;
 
  team_code = substr(team, 1, 3);
  team_upper = upcase(team);
  team_lower = lowcase(team);
 
run;

data baseball;
  set baseball;
 
  team_trailing_blanks = cat(team, '           ');
  team_no_whitespace = trim(team_trailing_blanks);
 
run;

data baseball;
  set baseball;
 
  yrmajor_char = put(yrmajor, $3.);
 
run;

/*- Use SAS numeric functions such as SUM, MEAN, RAND, SMALLEST, LARGEST, ROUND,*/
/*and INT.*/
data applianc;
  set sashelp.applianc;
 
  applianc_sum = sum(of units_1-units_24);
  applianc_mean = mean(of units_1-units_24);
 
  applianc_sum_dec = applianc_sum*0.99999;
  applianc_sum_round = round(applianc_sum_dec);
 
run;

data applianc;
  set sashelp.applianc;
 
  largest_1 = largest(1, of units_1-units_24);
  largest_5 = largest(5, of units_1-units_24);
 
  rand1 = rand('normal');
 
  smallest_1 = smallest(1, of units_1-units_24);
  smallest_5 = smallest(5, of units_1-units_24);
run;


/*- Create SAS date values by using the functions MDY, TODAY, DATE, and TIME.*/
/*- Extract the month, year, and interval from a SAS date value by using the functions*/
/*YEAR, QTR, MONTH, and DAY.*/

data retail;
  set sashelp.retail (drop=date);
 
  date = mdy(month,day, year);
 
run;

data retail;
  set retail (drop = day month year);
 
  month = month(date);
  day = day(date);
  year = year(date);

run;
/*? Perform calculations with date and datetime values and time intervals by using the*/
/*functions INTCK, INTNX, DATDIF and YRDIF. */

data retail;
  set retail;
 
  days_before = intck('day', today(), date);
  years_before = intck('year', today(), date);
 
  years_later_40 = intnx('year', date, 40);
 
  date_difference = datdif(date, today(), 'act/act');
  year_difference = yrdif(date, today(), 'act/act');
run;

/*7. Use SAS functions to convert character data to numeric and vice versa.*/
/*- Explain the automatic conversion that SAS uses to convert values between data types.*/
data mycars;
  input make $ model $ mpg_highway $;
  datalines;
Acurra MDX 25
Buick Regal 20
GMC Yukon 14
;
run;

proc contents data=mycars;
run;

data mycars_1;
  set mycars;
 
  mpg_highway_num = mpg_highway * 1;
 
run;

proc contents data=mycars_1;
run;


/*- Use the INPUT function to explicitly convert character data values to numeric values.*/
data mycars_2;
  set mycars;
 
  mpg_highway_num = input(mpg_highway, 6.);
 
run;

proc contents data=mycars_2;
run;

/*- Use the PUT function to explicitly convert numeric data values to character values.*/

data mycars_3;
  set mycars_2;
 
  mpg_highway_str = put(mpg_highway_num, $6.);
 
run;

proc contents data=mycars_3;
run;


/*Process data using DO LOOPS.*/
/*- Explain how iterative DO loops function.*/
data ice_cream_sales;
  sales = 0;
 
  do sales = 1 to 100 by 2;
     total = sales * 1.5;
     output;
  end;
 
run;


/*- Use DO loops to eliminate redundant code and to perform repetitive calculations.*/
/*- Use conditional DO loops.*/

data ice_cream_sale_while;
  inventory = 350;
  total = 0;
  do while(inventory > 0);
      inventory = inventory - 1;
      total = total + 0.75;
      output;
  end;
run;
/*- Use nested DO loops.*/

data ice_cream_id;

  do i = 1 to 7;
 
     ice_cream_id = i;
     do j = 1 to 5;
    
        topping_id = j;
        output;
     end;
  end;
  drop i j;
 
run;

/*8. Restructure SAS data sets with PROC TRANSPOSE.*/
/*- Select variables to transpose with the VAR statement.*/

proc transpose data=sashelp.shoes;

  var inventory;
 
run;

/*- Rename transposed variables with the ID statement.*/
/*- Process data within groups using the BY statement.*/
proc sort data=sashelp.shoes out=shoes;
  by subsidiary;
run;

proc transpose data=shoes;

  var inventory;
  by subsidiary;
  id product;
 
run;



/*- Use PROC TRANSPOSE options (OUT=, PREFIX= and NAME=).*/

proc transpose data=shoes out=shoesT prefix=group name=category;
 
run;


/*9. Use macro variables to simplify program maintenance.*/
/*- Create macro variables with the %LET statement*/


%let name = pat;
%put name = &name.;
%let date = %sysfunc(today());
%put date = &date.;

/*- Use macro variables within SAS programs. */
%let audit_id = 17;
%put audit_id = &audit_id.;

data shoest_modified;
  set shoesT;
 
  format modified_date ddmmyy10.;
 
  modified_date = 22000;
  modified_by = .;
 
  if category eq "Returns" then do;
     group1 = group1 + 10000;
     modified_date = &date.;
     modified_by = &audit_id.;
  end;
 
run;


/* Section 3 - Error Handling */

/* Identify and resolve programming logic errors. */
/* • Use the PUTLOG Statement in the Data Step to help identify logic errors. */

%let student_name = Pat;
%let height = 70;
%let weight = 120;
%let age = 15;
%let sex = M;

data new_student;
  set sashelp.class (obs=1);
 
  name = symget('student_name');
  weight = &weight;
  age = &age.;
  sex = symget('sex');
 
  if &height. not in (12:100) then do;
     height = .;
     putlog "NOTE: The height is not a valid number. It has been set to missing.";
  end;
 
  else do;
     height = &height.;
     putlog "NOTE: The height is a valid number. It has been set to &height..";
  end;
 
run; 
 



/* • Use PUTLOG to write the value of a variable, formatted values, or to write values of all */
/* variables. */

data class_updated;
  set sashelp.class new_student;
 
  putlog "NOTE: Their name is " name ;
  putlog "NOTE: Their Age is " age ;
 
run;

/* • Use PUTLOG with Conditional logic. */

data class_updated;
  set class_updated;

  if age ge 15 then do;
 
     putlog "NOTE: Their name is " name ;
     putlog "NOTE: Their Age is " age ;
 
  end;
 
run;


/* • Use temporary variables N and ERROR to debug a DATA step. */

data class_updated;
  set class_updated (obs=5);
 
     putlog _N_ ;
     putlog name;
     putlog _ERROR_ ;
 
 
run;


/* Recognize and correct syntax errors. */


/* • Identify the characteristics of SAS statements. */
/*  */
/* NO CODE: */
/* "A SAS statement is a string of SAS keywords, SAS names, special characters, and */
/* operators that instructs SAS to perform an operation or that gives information to */
/* SAS. Each SAS statement ends with a semicolon." */
/* Source: https://documentation.sas.com/api/docsets/lestmtsref/9.4/content/lestmtsref.pdf?locale=en */

/* • Define SAS syntax rules including the typical types of syntax errors such as misspelled */
/* keywords, unmatched quotation marks, missing semicolons, and invalid options. */

dota mycars;
  set sashelp.cars;
run;

/* not valid option */
data mycars;
  set sashelp.cars(notvalidoption=this);
run;

/* missing semicolon */
data mycars;
  set sashelp.cars;
run;

/* • Use the log to help diagnose syntax errors in a given program.  */
/* no code */





/*Section 4 - Generate Reports and Output */


/*1. Generate list reports using the PRINT procedure.*/
proc print data=sashelp.cars(obs=5);
run;

/*• Modify the default behavior of PROC PRINT by adding statements and options such as*/
/*o use the VAR statement to select and order variables.*/
proc print data=sashelp.cars(obs=5);
  var make model msrp invoice;
run;

/*o calculate totals with a SUM statement.*/
proc print data=sashelp.cars(obs=5);
  var make model msrp invoice;
  sum msrp invoice;
run;

/*o select observations with a WHERE statement.*/
proc print data=sashelp.cars(obs=50);
  where type = 'SUV';
  var type make model msrp invoice;
  sum msrp invoice;
run;

/*o use the ID statement to identify observations.*/
proc print data=sashelp.cars(obs=50);
  id type;
  var make model msrp invoice;
  sum msrp invoice;
run;


/*o use the BY statement to process groups.*/
proc sort data=sashelp.cars out=cars;
  by type;
run;

proc print data=cars(obs=20);
  by type;
  var make model msrp invoice;
  sum msrp invoice;
run;


/*Generate summary reports and frequency tables using base SAS procedures.*/

/*• Produce one-way and two-way frequency tables with the FREQ procedure.*/
proc freq data=sashelp.class;
  tables age;
run;

proc freq data=sashelp.class;
  tables age*sex;
run;  


/*• Enhance frequency tables with options (NLEVELS, ORDER=).*/
proc freq data=sashelp.class nlevels;
run;

proc freq data=sashelp.class order=freq;
  tables age;
run;


/*• Use PROC FREQ to validate data in a SAS data set.*/

%let student_name = Pat;
%let height = 70;
%let weight = 120;
%let age = 35;
%let sex = M;

data new_student;
  set sashelp.class(obs=1);
 
  name = symget('student_name');
  weight = &weight;
  age = &age.;
  sex = symget('sex');
  height = &height.;
run;

data class_updated;
  set sashelp.class new_student;
run;

proc freq data=class_updated;
  tables age;
run;


/*• Calculate summary statistics and multilevel summaries using the MEANS procedure*/

proc means data=sashelp.baseball;
run;

/*• Enhance summary tables with options.*/

proc means data=sashelp.baseball(where=(league='National')) mean;
  class division team;
  types division*team;
  var nHome;
run;

/*• Identify extreme and missing values with the UNIVARIATE procedure. */

proc univariate data=class_updated;
  var age;
run;



/*3 - Enhance reports system user-defined formats, titles, footnotes and SAS System reporting options.*/

/*• Use PROC FORMAT to define custom formats.*/
/*o VALUE statement*/
proc format;
  value prices
     low-15000 = 'low price'
     15001-45000 = 'mid price'
     45001-high = 'high price'
 ;
run;

data cars;
  set sashelp.cars(keep=make model msrp);
 
  price = put(msrp, prices.);
 
run;
 
/*o CNTLIN= option*/

data bbformat;
  input fmtname $ start end label $;
  datalines;
hr_group 1 10 low
hr_group 11 29 midrange
hr_group 30 90 slugger
;
run;

proc format cntlin=bbformat;
run;

proc freq data=sashelp.baseball;
  table nHome;
  format nHome hr_group.;
run;


/*• Use the LABEL statement to define descriptive column headings.*/

proc print data=sashelp.cars (obs=10);
  var make model msrp;
run;

data cars;
  set sashelp.cars;
  label msrp = 'Recommended Retail Price (in USD)';
run;

proc contents data=cars;
run;


/*• Control the use of column headings with the LABEL and SPLIT=options in PROC PRINT*/

proc print data=cars (obs=10) label;
  var make model msrp;
run;

/*split = option specifies a line break*/
proc print data=cars (obs=10) split='(';
  var make model msrp;
run;



/*4 - Generate reports using ODS statements.*/

/*• Identify the Output Delivery System destinations.*/
/*• Create HTML, PDF, RTF, and files with ODS statements.*/
/* ods html file='my_report.html'; */
ods html file='/folders/myfolders/my_report.html';
  proc print data=cars (obs=10) label;
     var make model msrp;
  run;
ods html close;

/* ods pdf file='my_report.pdf'; */
ods pdf file='/folders/myfolders/my_report.pdf';
  proc print data=cars (obs=10) label;
     var make model msrp;
  run;
ods pdf close;

/* ods rtf file='my_report.rtf'; */
ods rtf file='/folders/myfolders/my_report.rtf';
  proc print data=cars (obs=10) label;
     var make model msrp;
  run;
ods rtf close;

/*• Use the STYLE=option to specify a style template.*/
ods rtf file='/folders/myfolders/my_report_bp.rtf' style=Blockprint;
  proc print data=cars (obs=10) label;
     var make model msrp;
  run;
ods rtf close;




/*• Create files that can be viewed in Microsoft Excel.*/

ods excel file='/folders/myfolders/my_report.xlsx';
  proc print data=cars (obs=10) label;
     var make model msrp;
  run;
ods excel close;


/*Export data*/

/*• Create a simple raw data file by using the EXPORT procedure as an alternative to the DATA step.*/
proc export data=cars
           outfile='/folders/myfolders/cars.csv'
           dbms=csv replace;
  putnames=yes;
run;


/*• Export data to Microsoft Excel using the SAS/ACCESS XLSX engine.*/

libname xlsxout xlsx '/folders/myfolders/new_cars.xlsx';

data xlsxout.cars;
  set cars;
run;
/*Section 4 - Generate Reports and Output */


/*1. Generate list reports using the PRINT procedure.*/
proc print data=sashelp.cars(obs=5);
run;

/*• Modify the default behavior of PROC PRINT by adding statements and options such as*/
/*o use the VAR statement to select and order variables.*/
proc print data=sashelp.cars(obs=5);
  var make model msrp invoice;
run;

/*o calculate totals with a SUM statement.*/
proc print data=sashelp.cars(obs=5);
  var make model msrp invoice;
  sum msrp invoice;
run;

/*o select observations with a WHERE statement.*/
proc print data=sashelp.cars(obs=50);
  where type = 'SUV';
  var type make model msrp invoice;
  sum msrp invoice;
run;

/*o use the ID statement to identify observations.*/
proc print data=sashelp.cars(obs=50);
  id type;
  var make model msrp invoice;
  sum msrp invoice;
run;


/*o use the BY statement to process groups.*/
proc sort data=sashelp.cars out=cars;
  by type;
run;

proc print data=cars(obs=20);
  by type;
  var make model msrp invoice;
  sum msrp invoice;
run;


/*Generate summary reports and frequency tables using base SAS procedures.*/

/*• Produce one-way and two-way frequency tables with the FREQ procedure.*/
proc freq data=sashelp.class;
  tables age;
run;

proc freq data=sashelp.class;
  tables age*sex;
run;  


/*• Enhance frequency tables with options (NLEVELS, ORDER=).*/
proc freq data=sashelp.class nlevels;
run;

proc freq data=sashelp.class order=freq;
  tables age;
run;


/*• Use PROC FREQ to validate data in a SAS data set.*/

%let student_name = Pat;
%let height = 70;
%let weight = 120;
%let age = 35;
%let sex = M;

data new_student;
  set sashelp.class(obs=1);
 
  name = symget('student_name');
  weight = &weight;
  age = &age.;
  sex = symget('sex');
  height = &height.;
run;

data class_updated;
  set sashelp.class new_student;
run;

proc freq data=class_updated;
  tables age;
run;


/*• Calculate summary statistics and multilevel summaries using the MEANS procedure*/

proc means data=sashelp.baseball;
run;

/*• Enhance summary tables with options.*/

proc means data=sashelp.baseball(where=(league='National')) mean;
  class division team;
  types division*team;
  var nHome;
run;

/*• Identify extreme and missing values with the UNIVARIATE procedure. */

proc univariate data=class_updated;
  var age;
run;



/*3 - Enhance reports system user-defined formats, titles, footnotes and SAS System reporting options.*/

/*• Use PROC FORMAT to define custom formats.*/
/*o VALUE statement*/
proc format;
  value prices
     low-15000 = 'low price'
     15001-45000 = 'mid price'
     45001-high = 'high price'
 ;
run;

data cars;
  set sashelp.cars(keep=make model msrp);
 
  price = put(msrp, prices.);
 
run;
 
/*o CNTLIN= option*/

data bbformat;
  input fmtname $ start end label $;
  datalines;
hr_group 1 10 low
hr_group 11 29 midrange
hr_group 30 90 slugger
;
run;

proc format cntlin=bbformat;
run;

proc freq data=sashelp.baseball;
  table nHome;
  format nHome hr_group.;
run;


/*• Use the LABEL statement to define descriptive column headings.*/

proc print data=sashelp.cars (obs=10);
  var make model msrp;
run;

data cars;
  set sashelp.cars;
  label msrp = 'Recommended Retail Price (in USD)';
run;

proc contents data=cars;
run;


/*• Control the use of column headings with the LABEL and SPLIT=options in PROC PRINT*/

proc print data=cars (obs=10) label;
  var make model msrp;
run;

/*split = option specifies a line break*/
proc print data=cars (obs=10) split='(';
  var make model msrp;
run;



/*4 - Generate reports using ODS statements.*/

/*• Identify the Output Delivery System destinations.*/
/*• Create HTML, PDF, RTF, and files with ODS statements.*/
/* ods html file='my_report.html'; */
ods html file='/folders/myfolders/my_report.html';
  proc print data=cars (obs=10) label;
     var make model msrp;
  run;
ods html close;

/* ods pdf file='my_report.pdf'; */
ods pdf file='/folders/myfolders/my_report.pdf';
  proc print data=cars (obs=10) label;
     var make model msrp;
  run;
ods pdf close;

/* ods rtf file='my_report.rtf'; */
ods rtf file='/folders/myfolders/my_report.rtf';
  proc print data=cars (obs=10) label;
     var make model msrp;
  run;
ods rtf close;

/*• Use the STYLE=option to specify a style template.*/
ods rtf file='/folders/myfolders/my_report_bp.rtf' style=Blockprint;
  proc print data=cars (obs=10) label;
     var make model msrp;
  run;
ods rtf close;




/*• Create files that can be viewed in Microsoft Excel.*/

ods excel file='/folders/myfolders/my_report.xlsx';
  proc print data=cars (obs=10) label;
     var make model msrp;
  run;
ods excel close;


/*Export data*/

/*• Create a simple raw data file by using the EXPORT procedure as an alternative to the DATA step.*/
proc export data=cars
           outfile='/folders/myfolders/cars.csv'
           dbms=csv replace;
  putnames=yes;
run;


/*• Export data to Microsoft Excel using the SAS/ACCESS XLSX engine.*/

libname xlsxout xlsx '/folders/myfolders/new_cars.xlsx';

data xlsxout.cars;
  set cars;
run;







